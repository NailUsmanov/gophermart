// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/interface.go -destination=internal/mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/NailUsmanov/gophermart/internal/storage"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockServiceStorage is a mock of ServiceStorage interface.
type MockServiceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockServiceStorageMockRecorder
	isgomock struct{}
}

// MockServiceStorageMockRecorder is the mock recorder for MockServiceStorage.
type MockServiceStorageMockRecorder struct {
	mock *MockServiceStorage
}

// NewMockServiceStorage creates a new mock instance.
func NewMockServiceStorage(ctrl *gomock.Controller) *MockServiceStorage {
	mock := &MockServiceStorage{ctrl: ctrl}
	mock.recorder = &MockServiceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceStorage) EXPECT() *MockServiceStorageMockRecorder {
	return m.recorder
}

// CheckExistOrder mocks base method.
func (m *MockServiceStorage) CheckExistOrder(ctx context.Context, numberOrder string) (bool, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistOrder", ctx, numberOrder)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckExistOrder indicates an expected call of CheckExistOrder.
func (mr *MockServiceStorageMockRecorder) CheckExistOrder(ctx, numberOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistOrder", reflect.TypeOf((*MockServiceStorage)(nil).CheckExistOrder), ctx, numberOrder)
}

// CreateNewOrder mocks base method.
func (m *MockServiceStorage) CreateNewOrder(ctx context.Context, userID int, orderNum string, sugar *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewOrder", ctx, userID, orderNum, sugar)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewOrder indicates an expected call of CreateNewOrder.
func (mr *MockServiceStorageMockRecorder) CreateNewOrder(ctx, userID, orderNum, sugar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewOrder", reflect.TypeOf((*MockServiceStorage)(nil).CreateNewOrder), ctx, userID, orderNum, sugar)
}

// GetOrdersByUserID mocks base method.
func (m *MockServiceStorage) GetOrdersByUserID(ctx context.Context, userID int) ([]storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", ctx, userID)
	ret0, _ := ret[0].([]storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockServiceStorageMockRecorder) GetOrdersByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockServiceStorage)(nil).GetOrdersByUserID), ctx, userID)
}

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// CheckExistUser mocks base method.
func (m *MockServiceInterface) CheckExistUser(ctx context.Context, orderNum string) (bool, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistUser", ctx, orderNum)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CheckExistUser indicates an expected call of CheckExistUser.
func (mr *MockServiceInterfaceMockRecorder) CheckExistUser(ctx, orderNum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistUser", reflect.TypeOf((*MockServiceInterface)(nil).CheckExistUser), ctx, orderNum)
}

// CreateNewOrder mocks base method.
func (m *MockServiceInterface) CreateNewOrder(ctx context.Context, userID int, orderNum string, sugar *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewOrder", ctx, userID, orderNum, sugar)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewOrder indicates an expected call of CreateNewOrder.
func (mr *MockServiceInterfaceMockRecorder) CreateNewOrder(ctx, userID, orderNum, sugar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewOrder", reflect.TypeOf((*MockServiceInterface)(nil).CreateNewOrder), ctx, userID, orderNum, sugar)
}
