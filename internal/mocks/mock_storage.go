// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/interface.go -destination=internal/mocks/mock_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/NailUsmanov/gophermart/internal/models"
	storage "github.com/NailUsmanov/gophermart/internal/storage"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockOrderOption is a mock of OrderOption interface.
type MockOrderOption struct {
	ctrl     *gomock.Controller
	recorder *MockOrderOptionMockRecorder
	isgomock struct{}
}

// MockOrderOptionMockRecorder is the mock recorder for MockOrderOption.
type MockOrderOptionMockRecorder struct {
	mock *MockOrderOption
}

// NewMockOrderOption creates a new mock instance.
func NewMockOrderOption(ctrl *gomock.Controller) *MockOrderOption {
	mock := &MockOrderOption{ctrl: ctrl}
	mock.recorder = &MockOrderOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderOption) EXPECT() *MockOrderOptionMockRecorder {
	return m.recorder
}

// CheckExistOrder mocks base method.
func (m *MockOrderOption) CheckExistOrder(ctx context.Context, numberOrder string) (bool, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistOrder", ctx, numberOrder)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckExistOrder indicates an expected call of CheckExistOrder.
func (mr *MockOrderOptionMockRecorder) CheckExistOrder(ctx, numberOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistOrder", reflect.TypeOf((*MockOrderOption)(nil).CheckExistOrder), ctx, numberOrder)
}

// CreateNewOrder mocks base method.
func (m *MockOrderOption) CreateNewOrder(ctx context.Context, userNumber int, numberOrder string, sugar *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewOrder", ctx, userNumber, numberOrder, sugar)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewOrder indicates an expected call of CreateNewOrder.
func (mr *MockOrderOptionMockRecorder) CreateNewOrder(ctx, userNumber, numberOrder, sugar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewOrder", reflect.TypeOf((*MockOrderOption)(nil).CreateNewOrder), ctx, userNumber, numberOrder, sugar)
}

// GetOrdersByUserID mocks base method.
func (m *MockOrderOption) GetOrdersByUserID(ctx context.Context, userID int) ([]storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", ctx, userID)
	ret0, _ := ret[0].([]storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockOrderOptionMockRecorder) GetOrdersByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockOrderOption)(nil).GetOrdersByUserID), ctx, userID)
}

// MockWorkerAccrual is a mock of WorkerAccrual interface.
type MockWorkerAccrual struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerAccrualMockRecorder
	isgomock struct{}
}

// MockWorkerAccrualMockRecorder is the mock recorder for MockWorkerAccrual.
type MockWorkerAccrualMockRecorder struct {
	mock *MockWorkerAccrual
}

// NewMockWorkerAccrual creates a new mock instance.
func NewMockWorkerAccrual(ctrl *gomock.Controller) *MockWorkerAccrual {
	mock := &MockWorkerAccrual{ctrl: ctrl}
	mock.recorder = &MockWorkerAccrualMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerAccrual) EXPECT() *MockWorkerAccrualMockRecorder {
	return m.recorder
}

// GetOrdersForAccrualUpdate mocks base method.
func (m *MockWorkerAccrual) GetOrdersForAccrualUpdate(ctx context.Context) ([]storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForAccrualUpdate", ctx)
	ret0, _ := ret[0].([]storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForAccrualUpdate indicates an expected call of GetOrdersForAccrualUpdate.
func (mr *MockWorkerAccrualMockRecorder) GetOrdersForAccrualUpdate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForAccrualUpdate", reflect.TypeOf((*MockWorkerAccrual)(nil).GetOrdersForAccrualUpdate), ctx)
}

// UpdateOrderStatus mocks base method.
func (m *MockWorkerAccrual) UpdateOrderStatus(ctx context.Context, number, status string, accrual *float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, number, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockWorkerAccrualMockRecorder) UpdateOrderStatus(ctx, number, status, accrual any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockWorkerAccrual)(nil).UpdateOrderStatus), ctx, number, status, accrual)
}

// MockBalanceIndicator is a mock of BalanceIndicator interface.
type MockBalanceIndicator struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceIndicatorMockRecorder
	isgomock struct{}
}

// MockBalanceIndicatorMockRecorder is the mock recorder for MockBalanceIndicator.
type MockBalanceIndicatorMockRecorder struct {
	mock *MockBalanceIndicator
}

// NewMockBalanceIndicator creates a new mock instance.
func NewMockBalanceIndicator(ctrl *gomock.Controller) *MockBalanceIndicator {
	mock := &MockBalanceIndicator{ctrl: ctrl}
	mock.recorder = &MockBalanceIndicatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceIndicator) EXPECT() *MockBalanceIndicatorMockRecorder {
	return m.recorder
}

// AddWithdrawOrder mocks base method.
func (m *MockBalanceIndicator) AddWithdrawOrder(ctx context.Context, userID int, orderNumber string, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWithdrawOrder", ctx, userID, orderNumber, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWithdrawOrder indicates an expected call of AddWithdrawOrder.
func (mr *MockBalanceIndicatorMockRecorder) AddWithdrawOrder(ctx, userID, orderNumber, sum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWithdrawOrder", reflect.TypeOf((*MockBalanceIndicator)(nil).AddWithdrawOrder), ctx, userID, orderNumber, sum)
}

// GetAllUserWithdrawals mocks base method.
func (m *MockBalanceIndicator) GetAllUserWithdrawals(ctx context.Context, userID int) ([]models.UserWithDraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]models.UserWithDraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserWithdrawals indicates an expected call of GetAllUserWithdrawals.
func (mr *MockBalanceIndicatorMockRecorder) GetAllUserWithdrawals(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserWithdrawals", reflect.TypeOf((*MockBalanceIndicator)(nil).GetAllUserWithdrawals), ctx, userID)
}

// GetUserBalance mocks base method.
func (m *MockBalanceIndicator) GetUserBalance(ctx context.Context, userID int) (float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockBalanceIndicatorMockRecorder) GetUserBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockBalanceIndicator)(nil).GetUserBalance), ctx, userID)
}

// GetUserWithDrawns mocks base method.
func (m *MockBalanceIndicator) GetUserWithDrawns(ctx context.Context, userID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithDrawns", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithDrawns indicates an expected call of GetUserWithDrawns.
func (mr *MockBalanceIndicatorMockRecorder) GetUserWithDrawns(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithDrawns", reflect.TypeOf((*MockBalanceIndicator)(nil).GetUserWithDrawns), ctx, userID)
}

// MockWithdrawLogic is a mock of WithdrawLogic interface.
type MockWithdrawLogic struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawLogicMockRecorder
	isgomock struct{}
}

// MockWithdrawLogicMockRecorder is the mock recorder for MockWithdrawLogic.
type MockWithdrawLogicMockRecorder struct {
	mock *MockWithdrawLogic
}

// NewMockWithdrawLogic creates a new mock instance.
func NewMockWithdrawLogic(ctrl *gomock.Controller) *MockWithdrawLogic {
	mock := &MockWithdrawLogic{ctrl: ctrl}
	mock.recorder = &MockWithdrawLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawLogic) EXPECT() *MockWithdrawLogicMockRecorder {
	return m.recorder
}

// AddWithdrawOrder mocks base method.
func (m *MockWithdrawLogic) AddWithdrawOrder(ctx context.Context, userID int, number string, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWithdrawOrder", ctx, userID, number, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWithdrawOrder indicates an expected call of AddWithdrawOrder.
func (mr *MockWithdrawLogicMockRecorder) AddWithdrawOrder(ctx, userID, number, sum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWithdrawOrder", reflect.TypeOf((*MockWithdrawLogic)(nil).AddWithdrawOrder), ctx, userID, number, sum)
}

// CheckExistOrder mocks base method.
func (m *MockWithdrawLogic) CheckExistOrder(ctx context.Context, numberOrder string) (bool, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistOrder", ctx, numberOrder)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckExistOrder indicates an expected call of CheckExistOrder.
func (mr *MockWithdrawLogicMockRecorder) CheckExistOrder(ctx, numberOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistOrder", reflect.TypeOf((*MockWithdrawLogic)(nil).CheckExistOrder), ctx, numberOrder)
}

// GetUserBalance mocks base method.
func (m *MockWithdrawLogic) GetUserBalance(ctx context.Context, userID int) (float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockWithdrawLogicMockRecorder) GetUserBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockWithdrawLogic)(nil).GetUserBalance), ctx, userID)
}

// MockWithdrawalFetcher is a mock of WithdrawalFetcher interface.
type MockWithdrawalFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalFetcherMockRecorder
	isgomock struct{}
}

// MockWithdrawalFetcherMockRecorder is the mock recorder for MockWithdrawalFetcher.
type MockWithdrawalFetcherMockRecorder struct {
	mock *MockWithdrawalFetcher
}

// NewMockWithdrawalFetcher creates a new mock instance.
func NewMockWithdrawalFetcher(ctrl *gomock.Controller) *MockWithdrawalFetcher {
	mock := &MockWithdrawalFetcher{ctrl: ctrl}
	mock.recorder = &MockWithdrawalFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalFetcher) EXPECT() *MockWithdrawalFetcherMockRecorder {
	return m.recorder
}

// GetAllUserWithdrawals mocks base method.
func (m *MockWithdrawalFetcher) GetAllUserWithdrawals(ctx context.Context, userID int) ([]models.UserWithDraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]models.UserWithDraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserWithdrawals indicates an expected call of GetAllUserWithdrawals.
func (mr *MockWithdrawalFetcherMockRecorder) GetAllUserWithdrawals(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserWithdrawals", reflect.TypeOf((*MockWithdrawalFetcher)(nil).GetAllUserWithdrawals), ctx, userID)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddWithdrawOrder mocks base method.
func (m *MockStorage) AddWithdrawOrder(ctx context.Context, userID int, number string, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWithdrawOrder", ctx, userID, number, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWithdrawOrder indicates an expected call of AddWithdrawOrder.
func (mr *MockStorageMockRecorder) AddWithdrawOrder(ctx, userID, number, sum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWithdrawOrder", reflect.TypeOf((*MockStorage)(nil).AddWithdrawOrder), ctx, userID, number, sum)
}

// CheckExistOrder mocks base method.
func (m *MockStorage) CheckExistOrder(ctx context.Context, numberOrder string) (bool, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistOrder", ctx, numberOrder)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckExistOrder indicates an expected call of CheckExistOrder.
func (mr *MockStorageMockRecorder) CheckExistOrder(ctx, numberOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistOrder", reflect.TypeOf((*MockStorage)(nil).CheckExistOrder), ctx, numberOrder)
}

// CheckHashMatch mocks base method.
func (m *MockStorage) CheckHashMatch(ctx context.Context, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHashMatch", ctx, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHashMatch indicates an expected call of CheckHashMatch.
func (mr *MockStorageMockRecorder) CheckHashMatch(ctx, login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHashMatch", reflect.TypeOf((*MockStorage)(nil).CheckHashMatch), ctx, login, password)
}

// CreateNewOrder mocks base method.
func (m *MockStorage) CreateNewOrder(ctx context.Context, userNumber int, numberOrder string, sugar *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewOrder", ctx, userNumber, numberOrder, sugar)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewOrder indicates an expected call of CreateNewOrder.
func (mr *MockStorageMockRecorder) CreateNewOrder(ctx, userNumber, numberOrder, sugar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewOrder", reflect.TypeOf((*MockStorage)(nil).CreateNewOrder), ctx, userNumber, numberOrder, sugar)
}

// GetAllUserWithdrawals mocks base method.
func (m *MockStorage) GetAllUserWithdrawals(ctx context.Context, userID int) ([]models.UserWithDraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]models.UserWithDraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserWithdrawals indicates an expected call of GetAllUserWithdrawals.
func (mr *MockStorageMockRecorder) GetAllUserWithdrawals(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserWithdrawals", reflect.TypeOf((*MockStorage)(nil).GetAllUserWithdrawals), ctx, userID)
}

// GetOrdersByUserID mocks base method.
func (m *MockStorage) GetOrdersByUserID(ctx context.Context, userID int) ([]storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", ctx, userID)
	ret0, _ := ret[0].([]storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockStorageMockRecorder) GetOrdersByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockStorage)(nil).GetOrdersByUserID), ctx, userID)
}

// GetOrdersForAccrualUpdate mocks base method.
func (m *MockStorage) GetOrdersForAccrualUpdate(ctx context.Context) ([]storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForAccrualUpdate", ctx)
	ret0, _ := ret[0].([]storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForAccrualUpdate indicates an expected call of GetOrdersForAccrualUpdate.
func (mr *MockStorageMockRecorder) GetOrdersForAccrualUpdate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForAccrualUpdate", reflect.TypeOf((*MockStorage)(nil).GetOrdersForAccrualUpdate), ctx)
}

// GetUserBalance mocks base method.
func (m *MockStorage) GetUserBalance(ctx context.Context, userID int) (float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockStorageMockRecorder) GetUserBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockStorage)(nil).GetUserBalance), ctx, userID)
}

// GetUserByLogin mocks base method.
func (m *MockStorage) GetUserByLogin(ctx context.Context, login string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, login)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockStorageMockRecorder) GetUserByLogin(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockStorage)(nil).GetUserByLogin), ctx, login)
}

// GetUserIDByLogin mocks base method.
func (m *MockStorage) GetUserIDByLogin(ctx context.Context, login string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByLogin", ctx, login)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByLogin indicates an expected call of GetUserIDByLogin.
func (mr *MockStorageMockRecorder) GetUserIDByLogin(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByLogin", reflect.TypeOf((*MockStorage)(nil).GetUserIDByLogin), ctx, login)
}

// GetUserWithDrawns mocks base method.
func (m *MockStorage) GetUserWithDrawns(ctx context.Context, userID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithDrawns", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithDrawns indicates an expected call of GetUserWithDrawns.
func (mr *MockStorageMockRecorder) GetUserWithDrawns(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithDrawns", reflect.TypeOf((*MockStorage)(nil).GetUserWithDrawns), ctx, userID)
}

// Registration mocks base method.
func (m *MockStorage) Registration(ctx context.Context, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", ctx, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Registration indicates an expected call of Registration.
func (mr *MockStorageMockRecorder) Registration(ctx, login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockStorage)(nil).Registration), ctx, login, password)
}

// UpdateOrderStatus mocks base method.
func (m *MockStorage) UpdateOrderStatus(ctx context.Context, number, status string, accrual *float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, number, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStorageMockRecorder) UpdateOrderStatus(ctx, number, status, accrual any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStorage)(nil).UpdateOrderStatus), ctx, number, status, accrual)
}
